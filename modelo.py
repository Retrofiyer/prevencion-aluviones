import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from PIL import Image
import io
import os
from dotenv import load_dotenv
import google.generativeai as genai
import plotly.graph_objects as go

load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

CSV_PATH = "dataset_rumipamba_limpio.csv"

# ===============================
# ENTRENAMIENTO DEL MODELO
# ===============================
def entrenar_modelo():
    df = pd.read_csv(CSV_PATH)
    df['fecha'] = pd.to_datetime(df['fecha'])
    df['Mes'] = df['fecha'].dt.month
    df['A√±o'] = df['fecha'].dt.year

    df['precipitacion_lag1'] = df['precipitacion_valor'].shift(1)
    df['temperatura_lag1'] = df['temperatura_valor'].shift(1)
    df['nivel_agua_lag1'] = df['nivel_agua_valor'].shift(1)
    df['presion_lag1'] = df['presion_valor'].shift(1)
    df = df.dropna()

    features = ['Mes', 'A√±o', 'precipitacion_lag1', 'temperatura_lag1', 'nivel_agua_lag1', 'presion_lag1']

    modelos = {
        'rf': {
            'precipitacion': RandomForestRegressor(n_estimators=100, random_state=42),
            'nivel_agua': RandomForestRegressor(n_estimators=100, random_state=42),
            'temperatura': RandomForestRegressor(n_estimators=100, random_state=42),
            'presion': RandomForestRegressor(n_estimators=100, random_state=42)
        },
        'arima': {
            'precipitacion': ARIMA(df['precipitacion_valor'], order=(3, 1, 2)).fit(),
            'nivel_agua': ARIMA(df['nivel_agua_valor'], order=(2, 1, 2)).fit(),
            'temperatura': ARIMA(df['temperatura_valor'], order=(2, 1, 2)).fit(),
            'presion': ARIMA(df['presion_valor'], order=(2, 1, 2)).fit()
        }
    }

    # Entrenar modelos Random Forest
    modelos['rf']['precipitacion'].fit(df[features], df['precipitacion_valor'])
    modelos['rf']['nivel_agua'].fit(df[features], df['nivel_agua_valor'])
    modelos['rf']['temperatura'].fit(df[features], df['temperatura_valor'])
    modelos['rf']['presion'].fit(df[features], df['presion_valor'])

    return modelos, df


# ===============================
# FUNCI√ìN DE PRECISI√ìN TEMPORAL
# ===============================
def calcular_precision_temporal(fecha_objetivo, fecha_ultima):
    dias_diff = (fecha_objetivo - fecha_ultima).days
    if dias_diff <= 0:
        return 1.0
    max_dias = 365 * 2
    precision = max(0.3, 1 - (dias_diff / max_dias))
    return round(precision * 100, 1)

# ===============================
# PREDICCI√ìN A FUTURO CON FUSI√ìN
# ===============================
def predecir_variables(modelos, mes, a√±o, dia, ultimos_valores, df):
    fecha_pred = pd.Timestamp(f"{a√±o}-{mes}-{dia}")
    fecha_ultima = df['fecha'].max()
    dias_diff = (fecha_pred - fecha_ultima).days
    alpha = min(1.0, dias_diff / 180)

    entrada = [[
        mes,
        a√±o,
        ultimos_valores['precipitacion_valor'],
        ultimos_valores['temperatura_valor'],
        ultimos_valores['nivel_agua_valor'],
        ultimos_valores['presion_valor']
    ]]

    # Predicci√≥n Random Forest
    pred_rf = {
        'precipitacion': modelos['rf']['precipitacion'].predict(entrada)[0],
        'nivel_agua': modelos['rf']['nivel_agua'].predict(entrada)[0],
        'temperatura': modelos['rf']['temperatura'].predict(entrada)[0],
        'presion': modelos['rf']['presion'].predict(entrada)[0]
    }

    # Predicci√≥n ARIMA (solo para variables con series temporales claras)
    pasos = dias_diff if dias_diff > 0 else 1
    pred_arima = {
        'precipitacion': modelos['arima']['precipitacion'].forecast(steps=pasos).iloc[-1],
        'nivel_agua': modelos['arima']['nivel_agua'].forecast(steps=pasos).iloc[-1],
        'temperatura': modelos['arima']['temperatura'].forecast(steps=pasos).iloc[-1],
        'presion': modelos['arima']['presion'].forecast(steps=pasos).iloc[-1]
    }

    # Fusi√≥n de predicciones
    pred_fusion = {
        k: round(max(0, alpha * pred_arima[k] + (1 - alpha) * pred_rf[k]), 2)
        for k in ['precipitacion', 'nivel_agua', 'temperatura', 'presion']
    }

    precision = calcular_precision_temporal(fecha_pred, fecha_ultima)
    fechas_precision = pd.date_range(start=fecha_ultima + pd.Timedelta(days=1), end=fecha_pred, freq='D')
    valores_precision = [calcular_precision_temporal(f, fecha_ultima) for f in fechas_precision]

    return pred_fusion, precision, fechas_precision, valores_precision

# ===============================
# GR√ÅFICAS Y GEMINI
# ===============================
def crear_grafica(modelo, df, mes, a√±o, variable, color='blue'):
    plt.figure(figsize=(12, 5))
    fechas = df['fecha']
    valores = df[f"{variable}_valor"]
    plt.plot(fechas, valores, label=f"{variable.capitalize()} hist√≥rica", marker='o', color=color)

    X_all = df[['Mes', 'A√±o', 'precipitacion_lag1', 'temperatura_lag1', 'nivel_agua_lag1', 'presion_lag1']]
    y_pred = modelo.predict(X_all)
    plt.plot(fechas, y_pred, linestyle='--', label="Tendencia estimada", color='orange')

    # Fechas futuras a partir del √∫ltimo dato
    ult = df.sort_values(by='fecha').iloc[-1]
    fecha_inicio = ult['fecha']
    fecha_fin = pd.to_datetime(f"{a√±o}-{mes}-01")

    # üß© Validar si la fecha seleccionada es anterior al dataset
    if fecha_fin < fecha_inicio:
        interpretacion = "La fecha seleccionada es anterior a los datos disponibles. No se genera predicci√≥n futura."
        buf = io.BytesIO()
        plt.figure(figsize=(6, 3))
        plt.text(0.5, 0.5, interpretacion, ha='center', va='center', fontsize=12)
        plt.axis('off')
        plt.tight_layout()
        plt.savefig(buf, format='png')
        plt.close()
        buf.seek(0)
        return Image.open(buf), interpretacion

    fechas_futuras = pd.date_range(start=fecha_inicio + pd.DateOffset(months=1), end=fecha_fin, freq='MS')

    pred_fechas, pred_valores = [], []
    lag_precipitacion = ult['precipitacion_valor']
    lag_temperatura = ult['temperatura_valor']
    lag_nivel_agua = ult['nivel_agua_valor']
    lag_presion = ult['presion_valor']

    for f in fechas_futuras:
        entrada = [[f.month, f.year, lag_precipitacion, lag_temperatura, lag_nivel_agua, lag_presion]]
        pred = modelo.predict(entrada)[0]
        ruido = np.random.normal(loc=0, scale=pred * 0.15)
        pred_ajustada = max(0, pred + ruido)
        pred_fechas.append(f)
        pred_valores.append(pred_ajustada)

        # Actualizar valores de entrada si son usados
        if variable == 'precipitacion':
            lag_precipitacion = pred_ajustada
        elif variable == 'nivel_agua':
            lag_nivel_agua = pred_ajustada
        elif variable == 'temperatura':
            lag_temperatura = pred_ajustada
        elif variable == 'presion':
            lag_presion = pred_ajustada

    # Agregar proyecci√≥n si existe
    if pred_fechas:
        plt.plot(pred_fechas, pred_valores, linestyle='-', color='gray', label="Proyecci√≥n mensual futura")
        plt.scatter(pred_fechas[-1], pred_valores[-1], color='red', s=100, label=f"Predicci√≥n para {mes}/{a√±o}")
        interpretacion = interpretar_variable(variable, pred_valores[-1])
    else:
        interpretacion = "No se pudo generar una predicci√≥n futura para la fecha seleccionada."

    plt.title(f"{variable.capitalize()} mensual y predicci√≥n")
    plt.xlabel("Fecha")
    plt.ylabel(variable.capitalize())
    plt.grid(True)
    plt.legend(loc='upper left')

    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png')
    plt.close()
    buf.seek(0)

    return Image.open(buf), interpretacion

def crear_grafica_precision(fechas, precisiones):
    plt.figure(figsize=(8, 4))
    plt.plot(fechas, precisiones, marker='o', color='green')
    plt.ylim(0, 105)
    plt.title("üìâ Precisi√≥n esperada del modelo en el tiempo")
    plt.ylabel("Precisi√≥n estimada (%)")
    plt.xlabel("Fecha de predicci√≥n")
    plt.grid(True)
    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png')
    plt.close()
    buf.seek(0)
    return Image.open(buf)

def interpretar_con_gemini(pred):
    precip = pred['precipitacion']
    nivel = pred['nivel_agua']
    temp = pred['temperatura']
    presion = pred['presion']
    
    # Calcular √≠ndice de riesgo combinado
    riesgo_precip = min(100, (precip / 70) * 100)  # 70mm fue el umbral cr√≠tico en 2022
    riesgo_nivel = min(100, (nivel / 35) * 100)    # 35cm umbral cr√≠tico estimado
    riesgo_combinado = (riesgo_precip + riesgo_nivel) / 2
    
    # USAR DIRECTAMENTE EL FALLBACK LOCAL MEJORADO
    return generar_interpretacion_combinada_local(pred, riesgo_combinado)
    
    # C√≥digo comentado temporalmente - se puede activar cuando Gemini funcione
    """
    prompt = (
        f"Eres un especialista en prevenci√≥n de desastres naturales para La Gasca, Quito, Ecuador. "
        f"El 31 de enero de 2022 ocurri√≥ un aluvi√≥n devastador con >70mm/h de lluvia que caus√≥ muertes y destrucci√≥n.\n\n"
        f"DATOS ACTUALES PREDICHOS:\n"
        f"üåßÔ∏è Precipitaci√≥n: {precip} mm\n"
        f"üåä Nivel de agua: {nivel} cm\n"
        f"üå°Ô∏è Temperatura: {temp} ¬∞C\n"
        f"üìâ Presi√≥n: {presion} hPa\n"
        f"üìä √çndice de riesgo combinado: {riesgo_combinado:.1f}%\n\n"
        f"PROPORCIONA UNA INTERPRETACI√ìN INTEGRAL que incluya:\n\n"
        f"1. **EVALUACI√ìN DE RIESGO**: ¬øQu√© tan cerca estamos de condiciones de diluvio?\n"
        f"2. **CONTEXTO HIST√ìRICO**: Comparaci√≥n con el evento del 31 de enero 2022\n"
        f"3. **FACTORES AGRAVANTES**: C√≥mo la temperatura y presi√≥n influyen en el riesgo\n"
        f"4. **ESCENARIOS POSIBLES**: Qu√© podr√≠a pasar si las condiciones empeoran\n"
        f"5. **ACCIONES INMEDIATAS**: Qu√© debe hacer la comunidad HOY\n"
        f"6. **VIGILANCIA COMUNITARIA**: Se√±ales espec√≠ficas que los vecinos deben observar\n"
        f"7. **PREPARACI√ìN FAMILIAR**: Kit de emergencia y rutas de evacuaci√≥n\n\n"
        f"Usa lenguaje claro, directo y ESPEC√çFICO para La Gasca. M√°ximo 10-12 l√≠neas."
    )
    
    try:
        model = genai.GenerativeModel(model_name="models/gemini-2.0-flash")
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return generar_interpretacion_combinada_local(pred, riesgo_combinado)
    """

def generar_interpretacion_combinada_local(pred, riesgo_combinado):
    """Interpretaci√≥n detallada de respaldo cuando falla la API"""
    precip = pred['precipitacion']
    nivel = pred['nivel_agua']
    temp = pred['temperatura']
    presion = pred['presion']
    
    # An√°lisis contextual m√°s detallado
    dias_hasta_critico = max(0, (70 - precip) / 10) if precip < 70 else 0
    factores_agravantes = []
    
    if temp > 20:
        factores_agravantes.append("temperatura alta intensifica evaporaci√≥n y posterior condensaci√≥n")
    if presion < 750:
        factores_agravantes.append("baja presi√≥n favorece formaci√≥n de nubes de tormenta")
    if nivel > 15:
        factores_agravantes.append("quebradas ya con nivel elevado reducen margen de seguridad")
    
    factores_texto = " - " + ", ".join(factores_agravantes) if factores_agravantes else ""
    
    if riesgo_combinado < 15:
        return (
            f"‚úÖ **RIESGO BAJO** ({riesgo_combinado:.1f}%): **SITUACI√ìN CONTROLADA** - Precipitaci√≥n {precip}mm y nivel {nivel}cm en rangos seguros. "
            f"Distancia al umbral cr√≠tico: ~{dias_hasta_critico:.1f} d√≠as de lluvia intensa{factores_texto}. "
            f"**APROVECHAR PARA**: Limpieza de canales, revisi√≥n de desag√ºes, actualizaci√≥n de kit de emergencia, "
            f"coordinaci√≥n vecinal. **VIGILANCIA**: Monitoreo diario de quebradas, pron√≥sticos meteorol√≥gicos oficiales."
        )
    elif riesgo_combinado < 30:
        return (
            f"‚ö†Ô∏è **RIESGO MODERADO** ({riesgo_combinado:.1f}%): **VIGILANCIA ACTIVA** - Con {precip}mm lluvia y {nivel}cm nivel, "
            f"estamos a {70-precip:.1f}mm del umbral cr√≠tico (desastre 2022){factores_texto}. "
            f"**ACCIONES INMEDIATAS**: Verificar rutas de evacuaci√≥n familiares, coordinar con vecinos sistemas de alerta, "
            f"mantener radio/celular cargado, documentos importantes en bolsa impermeable. **OBSERVAR**: Cambios s√∫bitos en quebradas, "
            f"ruidos de arrastre de piedras, color del agua (transparente‚Üímarr√≥n), crecimiento de caudal."
        )
    elif riesgo_combinado < 50:
        return (
            f"üö® **RIESGO ALTO** ({riesgo_combinado:.1f}%): **ALERTA PREVENTIVA** - Precipitaci√≥n {precip}mm se aproxima peligrosamente "
            f"al umbral del desastre del 31 enero 2022 (>70mm/h){factores_texto}. **RIESGO REAL**: Saturaci√≥n acelerada del suelo, "
            f"crecimiento exponencial de caudales. **PREPARAR EVACUACI√ìN**: Veh√≠culo listo, combustible, ruta definida hacia terreno alto. "
            f"**COMUNICAR**: Situaci√≥n a familiares, vecinos vulnerables, autoridades locales. **SE√ëALES CR√çTICAS**: Rugido creciente en quebradas, "
            f"espuma en el agua, vibraci√≥n en puentes, animales inquietos."
        )
    elif riesgo_combinado < 75:
        return (
            f"üî¥ **RIESGO CR√çTICO** ({riesgo_combinado:.1f}%): **EMERGENCIA PREVENTIVA** - ¬°Condiciones peligrosas similares al aluvi√≥n de 2022! "
            f"Precipitaci√≥n {precip}mm y nivel {nivel}cm indican PELIGRO INMINENTE{factores_texto}. "
            f"**EVACUACI√ìN PREVENTIVA RECOMENDADA** especialmente para: adultos mayores, ni√±os, personas con discapacidad, viviendas cercanas a quebradas. "
            f"**ACCIONES CR√çTICAS**: Alertar 911, comunicar emergencia a vecinos, documentos y medicinas esenciales listos, "
            f"identificar refugios seguros (colegios, iglesias en terreno alto). **PELIGRO EXTREMO**: Rugido ensordecedor, temblor del suelo, olor intenso a tierra."
        )
    else:
        return (
            f"‚ö° **EMERGENCIA EXTREMA** ({riesgo_combinado:.1f}%): **ALUVI√ìN PROBABLE** - ¬°EVACUACI√ìN INMEDIATA! "
            f"Condiciones IGUALES O PEORES al desastre del 31 enero 2022. **PELIGRO MORTAL INMINENTE**{factores_texto}. "
            f"**ACTUAR AHORA**: Buscar terreno alto (>100m de quebradas), llamar 911 - EMERGENCIA MAYOR, "
            f"NO intentar rescatar pertenencias, alejarse inmediatamente de cauces y laderas inestables. "
            f"**S√çNTOMAS DE ALUVI√ìN ACTIVO**: Rugido como tren, suelo temblando, rocas gigantes rodando, "
            f"√°rboles cayendo, corte s√∫bito de servicios. **REFUGIO**: Estructuras s√≥lidas en terreno alto, comunicaci√≥n constante con emergencias."
        )

def interpretar_variable(variable, valor):
    # Definir umbrales cr√≠ticos para La Gasca basados en el evento del 31 de enero de 2022
    umbrales = {
        'precipitacion': {
            'bajo': 10,
            'moderado': 30, 
            'alto': 50,
            'critico': 70,
            'extremo': 100
        },
        'nivel_agua': {
            'bajo': 5,
            'moderado': 15,
            'alto': 25,
            'critico': 35,
            'extremo': 50
        },
        'temperatura': {
            'bajo': 12,
            'moderado': 18,
            'alto': 24,
            'critico': 30,
            'extremo': 35
        },
        'presion': {
            'bajo': 740,
            'moderado': 760,
            'alto': 780,
            'critico': 800,
            'extremo': 820
        }
    }
    
    def obtener_nivel_riesgo(variable, valor, umbrales):
        if valor <= umbrales[variable]['bajo']:
            return 'bajo'
        elif valor <= umbrales[variable]['moderado']:
            return 'moderado'
        elif valor <= umbrales[variable]['alto']:
            return 'alto'
        elif valor <= umbrales[variable]['critico']:
            return 'cr√≠tico'
        else:
            return 'extremo'
    
    nivel = obtener_nivel_riesgo(variable, valor, umbrales)
    
    # USAR DIRECTAMENTE EL FALLBACK LOCAL MEJORADO
    return generar_interpretacion_local(variable, valor, nivel)
    
    # C√≥digo comentado temporalmente - se puede activar cuando Gemini funcione
    """
    prompt = (
        f"Como experto en prevenci√≥n de desastres naturales especializado en La Gasca (Quito), "
        f"proporciona una interpretaci√≥n COMPLETA y EDUCATIVA sobre:\n\n"
        f"Variable: {variable}\n"
        f"Valor actual: {valor}\n"
        f"Nivel de riesgo detectado: {nivel}\n\n"
        f"Tu respuesta debe incluir:\n"
        f"1. **Contexto del valor**: Qu√© significa este n√∫mero en t√©rminos simples (usa analog√≠as cotidianas)\n"
        f"2. **Proximidad al peligro**: ¬øQu√© tan cerca estamos de condiciones de diluvio? "
        f"(El 31 de enero de 2022 hubo un aluvi√≥n devastador con >70mm/h de lluvia)\n"
        f"3. **Factores que influyen**: Qu√© otros elementos podr√≠an empeorar la situaci√≥n "
        f"(saturaci√≥n del suelo, obstrucci√≥n de quebradas, pendiente, etc.)\n"
        f"4. **Ejemplos pr√°cticos**: Comparaciones con situaciones conocidas o eventos hist√≥ricos\n"
        f"5. **Acciones espec√≠ficas**: Qu√© debe hacer la comunidad AHORA seg√∫n este nivel\n"
        f"6. **Se√±ales de alerta**: Qu√© observar para detectar empeoramiento\n\n"
        f"M√°ximo 6-8 l√≠neas, lenguaje claro y directo para la comunidad."
    )
    
    try:
        model = genai.GenerativeModel(model_name="models/gemini-2.0-flash")
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        # Fallback con interpretaci√≥n local m√°s detallada
        return generar_interpretacion_local(variable, valor, nivel)
    """

def generar_interpretacion_local(variable, valor, nivel):
    """Funci√≥n de respaldo para generar interpretaciones detalladas sin API"""
    interpretaciones = {
        'precipitacion': {
            'bajo': f"üíß **LLUVIA LIGERA** ({valor} mm): Como roc√≠o matutino o llovizna suave. Estamos a {70-valor} mm del umbral cr√≠tico de diluvio (>70 mm/h caus√≥ el desastre de 2022). **QU√â HACER**: Momento ideal para limpiar canales y desag√ºes. Revisar que nada obstruya quebradas. Mantener kit de emergencia actualizado. **VIGILAR**: Acumulaci√≥n en 24h, saturaci√≥n del suelo en laderas, cambios de color en quebradas.",
            'moderado': f"üåßÔ∏è **LLUVIA MODERADA** ({valor} mm): Como ducha normal, suelo comenzando a saturarse. Solo {70-valor} mm nos separan del nivel de ALERTA ROJA. **PELIGRO CRECIENTE**: Si contin√∫a por horas puede saturar completamente el suelo en pendientes. **ACCIONES**: Coordinar con vecinos, verificar rutas de evacuaci√≥n, tener radio/celular cargado. **OBSERVAR**: Ruido de arrastre en quebradas, agua turbia, crecimiento del caudal.",
            'alto': f"‚ö†Ô∏è **LLUVIA INTENSA** ({valor} mm): Como manguera abierta, PELIGRO REAL. Solo {70-valor} mm del umbral del desastre de 2022. Suelo satur√°ndose r√°pidamente, quebradas subiendo. **RIESGO INMINENTE**: Deslizamientos en laderas, desbordamiento de cauces. **EVACUAR PREVENTIVAMENTE** de zonas bajas. Alejarse de quebradas. Documentos listos. **ALERTA M√ÅXIMA**: Ruidos extra√±os, agua lodosa, piedras rodando.",
            'critico': f"üö® **ALERTA ROJA** ({valor} mm): NIVEL CR√çTICO alcanzado. Condiciones similares al aluvi√≥n del 31 enero 2022 que caus√≥ muertes. Riesgo INMINENTE de desbordamiento masivo. **EVACUACI√ìN PREVENTIVA OBLIGATORIA**. Buscar terreno alto inmediatamente. Alejarse de quebradas y laderas. **EMERGENCIA**: Llamar 911, alertar a vecinos. **SE√ëALES DE PELIGRO EXTREMO**: Rugido de agua, piedras grandes rodando, grietas en el suelo.",
            'extremo': f"üî¥ **EVACUACI√ìN INMEDIATA** ({valor} mm): SUPERA el umbral del desastre 2022. Condiciones EXTREMAS de diluvio activo. ALUVI√ìN EN CURSO probable. **ACTUAR YA**: Terreno alto, lejos de cauces. 911 - EMERGENCIA. **PELIGRO MORTAL**: No permanecer en viviendas cerca de quebradas. **S√çNTOMAS DE ALUVI√ìN**: Rugido ensordecedor, temblor del suelo, olor a tierra mojada intenso, animales huyendo."
        },
        'nivel_agua': {
            'bajo': f"üåä **NIVEL NORMAL** ({valor} cm): Quebrada en capacidad adecuada. Drenaje funcionando bien. **OPORTUNIDAD**: Momento perfecto para limpieza de canales, remoci√≥n de escombros, revisi√≥n de infraestructura. **VIGILANCIA COMUNITARIA**: Establecer turnos de observaci√≥n, identificar puntos cr√≠ticos. **PREPARACI√ìN**: Actualizar rutas de evacuaci√≥n, revisar kit de emergencia familiar.",
            'moderado': f"üìà **NIVEL CRECIENTE** ({valor} cm): Quebradas llen√°ndose gradualmente. A√∫n manejable pero requiere atenci√≥n. **FACTORES DE RIESGO**: Lluvia sostenida puede saturar capacidad en 2-4 horas. **VIGILAR**: Ruido de piedras arrastr√°ndose, cambio de color del agua (transparente‚Üímarr√≥n), aumento de velocidad. **ACCIONES**: Alejar veh√≠culos de cauces, verificar que ni√±os no jueguen cerca del agua.",
            'alto': f"‚ö†Ô∏è **NIVEL PREOCUPANTE** ({valor} cm): Quebrada cerca de capacidad m√°xima. Riesgo de desbordamiento en 1-2 horas si contin√∫a subiendo. **PELIGRO REAL**: Erosi√≥n de orillas, arrastre de objetos grandes. **PREPARACI√ìN INMEDIATA**: Evacuar preventivamente zonas bajas, tener veh√≠culos listos para salir, documentos importantes en bolsa impermeable. **OBSERVAR**: Espuma en el agua, ruido creciente, vibraci√≥n en puentes.",
            'critico': f"üö® **NIVEL CR√çTICO** ({valor} cm): Capacidad de quebrada AL L√çMITE. Desbordamiento INMINENTE en minutos u horas. **EVACUACI√ìN PREVENTIVA OBLIGATORIA** de zonas bajas. **PELIGRO EXTREMO**: Arrastre de rocas grandes, socavaci√≥n de cimientos, colapso de puentes. **ACTUAR INMEDIATAMENTE**: Terreno alto, alejarse 100+ metros de cauces, llamar emergencias 911.",
            'extremo': f"üî¥ **DESBORDAMIENTO ACTIVO** ({valor} cm): NIVEL EXTREMO - Aluvi√≥n en desarrollo. Quebrada desbordando o a punto de hacerlo. **EVACUACI√ìN INMEDIATA**: Buscar terreno alto YA. **EMERGENCIA 911**: Reportar situaci√≥n cr√≠tica. **PELIGRO MORTAL**: Flujo de escombros, arrastre de veh√≠culos, destrucci√≥n de infraestructura. **NO INTENTAR cruzar cauces o rescatar objetos**."
        },
        'temperatura': {
            'bajo': f"üå°Ô∏è **TEMPERATURA BAJA** ({valor}¬∞C): Condiciones fr√≠as que pueden intensificar efectos de lluvia. **CONTEXTO CLIM√ÅTICO**: Aire fr√≠o retiene menos humedad, puede generar lluvias m√°s prolongadas. **CONSIDERACIONES**: Mayor riesgo de hipotermia en emergencias, suelo m√°s compacto (menos absorci√≥n). **PREPARACI√ìN**: Ropa abrigada en kit de emergencia, mantas t√©rmicas, combustible para calefacci√≥n.",
            'moderado': f"üå°Ô∏è **TEMPERATURA NORMAL** ({valor}¬∞C): Condiciones t√≠picas de Quito. **VENTAJA**: Temperatura estable facilita evacuaciones y rescates. Suelo con capacidad normal de absorci√≥n. **MANTENER**: Vigilancia normal, preparaci√≥n est√°ndar de emergencias. **RECORDAR**: Cambios bruscos de temperatura pueden indicar frentes meteorol√≥gicos intensos.",
            'alto': f"üå°Ô∏è **TEMPERATURA ELEVADA** ({valor}¬∞C): Calor inusual para La Gasca puede indicar sistemas meteorol√≥gicos intensos. **ALERTA**: Aire caliente retiene m√°s humedad, posibles tormentas m√°s fuertes. Suelo seco absorbe menos agua inicialmente. **PREPARACI√ìN**: Hidrataci√≥n en kit de emergencia, protecci√≥n solar, considerar mayor volatilidad clim√°tica.",
            'critico': f"üå°Ô∏è **TEMPERATURA MUY ALTA** ({valor}¬∞C): Condiciones excepcionales que pueden preceder eventos clim√°ticos extremos. **CONTEXTO**: Gradientes t√©rmicos fuertes generan inestabilidad atmosf√©rica severa. **ALERTA M√ÅXIMA**: Posibles tormentas superc√©lulas, granizo, vientos fuertes. **PREPARACI√ìN ESPECIAL**: Refugio s√≥lido, comunicaciones de emergencia.",
            'extremo': f"üå°Ô∏è **TEMPERATURA EXTREMA** ({valor}¬∞C): Condiciones an√≥malas que requieren m√°xima precauci√≥n. **PELIGRO**: Sistemas meteorol√≥gicos severos probable. **EMERGENCIA CLIM√ÅTICA**: Mantenerse informado via radio oficial, refugio seguro, evitar exposici√≥n prolongada al exterior."
        },
        'presion': {
            'bajo': f"üìâ **PRESI√ìN BAJA** ({valor} hPa): Sistema de baja presi√≥n puede indicar aproximaci√≥n de frente lluvioso. **CONTEXTO METEOROL√ìGICO**: Aire ascendente, condensaci√≥n, nubes cumulonimbus. **VIGILANCIA**: Posible intensificaci√≥n de lluvias en 6-12 horas. **PREPARACI√ìN**: Revisar pron√≥sticos oficiales, tener plan de contingencia listo.",
            'moderado': f"üìâ **PRESI√ìN NORMAL** ({valor} hPa): Condiciones atmosf√©ricas estables para Quito (2800 msnm). **VENTAJA**: Menos probabilidad de cambios meteorol√≥gicos s√∫bitos. **MANTENER**: Vigilancia est√°ndar, preparaci√≥n normal de emergencias. **APROVECHAR**: Momento √≥ptimo para mantenimiento preventivo.",
            'alto': f"üìâ **PRESI√ìN ALTA** ({valor} hPa): Alta presi√≥n puede indicar estabilidad meteorol√≥gica temporal. **CONTEXTO**: Aire descendente, despeje de nubes. Sin embargo, cambios bruscos pueden generar tormentas posteriores. **OPORTUNIDAD**: Realizar trabajos de prevenci√≥n, limpieza de canales.",
            'critico': f"üìâ **PRESI√ìN MUY ALTA** ({valor} hPa): Condiciones atmosf√©ricas inusuales. **ALERTA**: Gradientes de presi√≥n fuertes pueden preceder cambios meteorol√≥gicos s√∫bitos y severos. **VIGILANCIA ESPECIAL**: Monitorear pron√≥sticos oficiales cada hora, tener comunicaciones listas.",
            'extremo': f"üìâ **PRESI√ìN EXTREMA** ({valor} hPa): Condiciones atmosf√©ricas an√≥malas. **EMERGENCIA METEOROL√ìGICA**: Posibles fen√≥menos severos (tornados, granizo, vientos destructivos). **REFUGIO INMEDIATO**: Estructura s√≥lida, comunicaci√≥n con autoridades, evitar salir al exterior."
        }
    }
    
    if variable in interpretaciones and nivel in interpretaciones[variable]:
        return interpretaciones[variable][nivel]
    else:
        return f"‚ö†Ô∏è **VALOR AN√ìMALO** {variable}: {valor} - Nivel {nivel}. Condiciones fuera de par√°metros normales. **PRECAUCI√ìN M√ÅXIMA**: Consultar con autoridades meteorol√≥gicas. Mantener vigilancia comunitaria extrema y preparaci√≥n para evacuaci√≥n."
def crear_grafica_lineal(df, variable='precipitacion_valor', color='blue'):
    import matplotlib.pyplot as plt
    from PIL import Image
    import io

    # Crear gr√°fico de l√≠neas
    plt.figure(figsize=(12, 5))
    plt.plot(df['fecha'], df[variable], color=color, linewidth=2.0)
    plt.title(f"Hist√≥rico del valor - {variable.replace('_', ' ').capitalize()}", fontsize=16)
    plt.xlabel("Fecha", fontsize=12)
    plt.ylabel(variable.replace('_valor', '').capitalize(), fontsize=12)
    plt.grid(True)
    plt.xticks(rotation=45)

    # Guardar en buffer
    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png')
    plt.close()
    buf.seek(0)

    return Image.open(buf)

def crear_grafica_lineal_interactiva(df, variable='precipitacion_valor', color='blue'):
    df = df.sort_values(by='fecha')

    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=df['fecha'],
        y=df[variable],
        mode='lines+markers',
        name=variable.replace('_valor', '').capitalize(),
        line=dict(color=color),
        marker=dict(size=4)
    ))

    fig.update_layout(
        title=f"üìä Evoluci√≥n hist√≥rica de {variable.replace('_valor', '').capitalize()}",
        xaxis_title="Fecha",
        yaxis_title=variable.replace('_valor', '').capitalize(),
        hovermode="x unified",
        template="plotly_white",
        height=400,
        width=900  # üëà Ampliamos significativamente el ancho
    )

    return fig

def crear_grafica_completa_interactiva(modelo_rf, df, variable, mes, a√±o, color='blue', ventana_movil=30):
    import plotly.graph_objects as go
    import pandas as pd
    import numpy as np

    df = df.sort_values(by='fecha')
    fecha_ultima = df['fecha'].max()
    fecha_objetivo = pd.to_datetime(f"{a√±o}-{mes:02d}-01")

    # L√≠nea real
    fechas = df['fecha']
    valores_reales = df[f"{variable}_valor"]

    # Promedio m√≥vil
    promedio_movil = valores_reales.rolling(window=ventana_movil).mean()

    # Generar predicciones mes a mes hasta la fecha objetivo
    fechas_futuras = pd.date_range(start=fecha_ultima + pd.DateOffset(months=1), end=fecha_objetivo, freq='MS')
    pred_fechas, pred_valores = [], []

    ult = df.iloc[-1]
    lag_precipitacion = ult['precipitacion_valor']
    lag_temperatura = ult['temperatura_valor']
    lag_nivel_agua = ult['nivel_agua_valor']
    lag_presion = ult['presion_valor']

    for f in fechas_futuras:
        entrada = [[
            f.month,
            f.year,
            lag_precipitacion,
            lag_temperatura,
            lag_nivel_agua,
            lag_presion
        ]]
        pred = modelo_rf.predict(entrada)[0]
        pred = max(0, pred + np.random.normal(loc=0, scale=pred * 0.1))  # suavizar ruido
        pred_fechas.append(f)
        pred_valores.append(pred)

        # actualizar lags
        if variable == 'precipitacion':
            lag_precipitacion = pred
        elif variable == 'nivel_agua':
            lag_nivel_agua = pred
        elif variable == 'temperatura':
            lag_temperatura = pred
        elif variable == 'presion':
            lag_presion = pred

    # Gr√°fico
    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=fechas,
        y=valores_reales,
        mode="lines",
        name="Datos reales",
        line=dict(color=color)
    ))

    fig.add_trace(go.Scatter(
        x=fechas,
        y=promedio_movil,
        mode="lines",
        name=f"Promedio m√≥vil {ventana_movil} d√≠as",
        line=dict(color='orange', dash='dash')
    ))

    if pred_fechas:
        fig.add_trace(go.Scatter(
            x=pred_fechas,
            y=pred_valores,
            mode="lines+markers",
            name="Predicci√≥n futura",
            line=dict(color='gray', dash='dot'),
            marker=dict(size=6, color='gray')
        ))

        # Punto rojo final
        fig.add_trace(go.Scatter(
            x=[pred_fechas[-1]],
            y=[pred_valores[-1]],
            mode="markers",
            name="Predicci√≥n seleccionada",
            marker=dict(size=12, color='red', symbol='circle')
        ))

    fig.update_layout(
        title=f"{variable.capitalize()} con tendencia y predicci√≥n",
        xaxis_title="Fecha",
        yaxis_title=variable.capitalize(),
        template="plotly_white",
        height=400,
        width=950  # üëà Gr√°ficas m√°s anchas
    )

    return fig


